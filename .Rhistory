library(deeper)
## obtain the example data
data("envir_example")
knitr::kable(envir_example[1:6,])
View(envir_example)
summary(envir_example)
set.seed(1234)
size <-
caret::createDataPartition(y = envir_example$PM2.5, p = 0.8, list = FALSE)
trainset <- envir_example[size, ]
testset <- envir_example[-size, ]
y <- c("PM2.5")
x <- colnames(envir_example[-c(1, 6)]) # except "date" and "PM2.5"
data(model_list)
View(model_details)
#method 1: using deeper package function
ranger <-
tuningModel(
basemodel  = 'SL.ranger',
params = list(num.trees = 100),
tune = list(mtry = c(1, 3, 7))
)
#method 2: employ the Superlearner package "create.Learner" method
#ranger <- SuperLearner::create.Learner(base_learner = 'SL.ranger',params = list(num.trees = 1000),tune = list(mtry = c(1,3,7)))
#method 3: create a function by oneself as follow
#ranger <- function(...){SL.ranger(...,num.trees = 1000)}
pred_m2 <-
predictModel(
Y = trainset[, y],
X = trainset[, x],
base_model = c("SL.xgboost", ranger),
cvControl = list(V = 5)
)
# predict the new dataset
pred_m2_new <- predict(object = pred_m2, newX = testset[, x])
head(pred_m2_new$pre_base$library.predict)
indices <-
CAST::CreateSpacetimeFolds(trainset, spacevar = "code", k = 7)
# Rows of validation set on each fold
v_raw <- indices$indexOut
names(v_raw) <- seq(1:7)
pred_m3 <- predictModel_parallel(
Y = trainset[, y],
X = trainset[, x],
base_model = c("SL.xgboost", ranger),
cvControl = list(V = length(v_raw), validRows = v_raw),
number_cores = 4,
seed = 1
)
# test dataset performance
test_p1 <-
assess.plot(pre = pred_m3_new$pre_base$pred, obs = testset[, y])
# prediction
pred_m3_new <- predict(object = pred_m3, newX = testset[, x])
head(pred_m3_new$pre_base$library.predict)
# test dataset performance
test_p1 <-
assess.plot(pre = pred_m3_new$pre_base$pred, obs = testset[, y])
print(test_p1$plot)
#Include original feature
pred_stack_10 <-
stack_ensemble_parallel(
object = pred_m3,
Y = trainset[, y],
meta_model = c("SL.ranger", "SL.xgboost", "SL.glmnet"),
original_feature = TRUE,
X = trainset[, x],
number_cores = 4
)
pred_stack_10_new <-
predict(object = pred_stack_10, newX = testset[, x])
pred_stack_10_new <-
predict(object = pred_stack_10, newX = testset[, x])
test_p2 <-
assess.plot(pre = pred_stack_10_new$pre_meta$pred, obs = testset[, y])
print(test_p2$plot)
